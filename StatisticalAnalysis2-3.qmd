---
title: "Statistical Analysis Chapters 2-3"
format: html
---
Chapter 2 Manipulating Network Data

2.2 Creating Network Graphs

A graph is a mathematical representation of V(vertices) = nodes and E(edges) = links; can be directed or undirected

The R package igraph was developed specifically to handle larger network graphing projects with multiple layers of data

```{r}
install.packages("devtools")
install.packages("sand")
```

A small (aka: "toy") graph can be generated as using the graph.formula function:

```{r}
library(igraph)
g <- graph_from_literal(1-2, 1-3, 2-3, 2-4, 3-5, 4-5, 
                    4-6, 4-7, 5-6, 6-7)

plot(g)
```

This generates an undirected graph. It will also change shape and location of nodes every time it is rendered.

To generate a directional "toy" graph, additional math is needed:

```{r}
dg <- graph_from_literal(1-+2, 1-+3, 2++3)
plot(dg)
```

This creates connections from 1 to 2 and 3 and between 2 and 3. So, the negative indicates an outgoing direction and the postive an incoming.

To replace numbers with names in a directional graph an have the results print into the termal rather than rendering visually, simply substitute:

```{r}
dgn <- graph_from_literal(Sam-+Mary, Sam-+Tom, 
                          Mary++Tom)
print_all(dgn)
```

To create an adjacency list visualize simply print the output of the str function:

```{r}
str(g)
print_all(g)
```

To print a two-column edges list of vertex pairs use the get.edgelist function:

```{r}
el <- get.edgelist (dgn)
print (el)
```

Warning message returned: 
`get.edgelist()` was deprecated in igraph 2.0.0.
ℹ Please use `as_edgelist()` instead.

```{r}
elu <- as_edgelist(dgn)
print (elu)
```

The function get.adjacency will return the list in matrix form

```{r}
mat <- get.adjacency (dgn)
print (mat)
```

Warning message:
`get.adjacency()` was deprecated in igraph 2.0.0.
ℹ Please use `as_adjacency_matrix()` instead.

```{r}
matu <- as_adjacency_matrix(dgn)
print (matujh)
```

Can create subgraphs by taking a prespecified subset of another graph (induced subgraph) or by including or excluding a subset of vertices or edges from another graph

```{r}
h <- induced_subgraph(g, 1:5)
print (h)
```

```{r}
alsoh <- g - vertices(c(6,7))
print (alsoh)
```

```{r}
h <- h + vertices(c(6,7))
g <- h + edges(c(4,6),c(4,7),c(5,6),c(6,7))
print (g)
```

```{r}
h1 <- h
h2 <- graph_from_literal(4-6, 4-7, 5-6, 6-7)
g <- union(h1,h2)
print (g)
```

2.3 Decorating Network Graphs

Other data relevant but not always included in the network (ie: nodes and edges) can be considered and when the network is equipped with attributes it is referred to as decorating the graph. This is accomplished in igraph using the '$' operator. Both edge and vertex attributes may be discrete or continuous.

Graph with weighted edges is a weighted graph.

Combining one dataset of edges with a vertex variable dataset to produce vertex attributes:

```{r}
library (sand)
# g.lazega <- graph.data.frame (elist.lazega, directed = "FALSE", vertices = v.attr.lazega) Depreciated error
g.lazega <- graph_from_data_frame (elist.lazega, directed = "FALSE", vertices = v.attr.lazega)
g.lazega$name <- "Lazega Lawyers"

vcount (g.lazega)

ecount (g.lazega)

#list.vertex.attributes (g.lazega) Depreciated error

vertex_attr_names (g.lazega)
```

2.4 Talking About Graphs

Simple graphs (proper edges) vs multi-graphs (loops and multi-edges) can be determind by using is_simple

```{r}
# is.simple (g) Deprecated error
is_simple (g)
```

```{r}
mg <- g + edge (2,3)
str(mg)

is_simple (mg)
```

Transforming a multi-graph to weighted graph and therefore a simple graph:

```{r}
E(mg) $weight <- 1
wg2 <- simplify (mg)
is_simple (wg2)

str(wg2)

E (wg2) $weight
```

Use *neighbors* to determine vertices joined by edges. Also called *adjacent* vertices. The code below shows that 3, 4, and 6 are joined to 5 by edges in the toy graph 'g'

```{r}
neighbors (g, 5)
```

To determine if edges are joined by a common vertex and further how many edges are *incident* or joined determines the *degree* of a vertex:

```{r}
degree (g)
```

In diagrphas, vertex degree is replaced by *in-degree* and *out-degree* which counts edge directions pointed toward and away from nodes.

```{r}
degree (dgn, mode = "in")

degree (dgn, mode = "out")
```

Terms of movement for a graph:
*walk*: In network analysis, a "walk" refers to a sequence of connected nodes (vertices) within a network, where you can traverse from one node to another along the edges, allowing for repetition of both nodes and edges; essentially, it's a way to navigate through the network by moving from one point to another, potentially revisiting the same points multiple times. (AI Overview result for Google search: "what is a walk in a network analysis")
*length* of walk
*trails*: walks without repeated edges
*paths*: trails without repeated vertices
*circuit*: trail with same beginning and end vertices
*cycle*: walk of at least three, same beginning and ending vertices but all other vertices are distinct
*acyclic*: graph containing no cycles
*reachable*: vertex connected by walk to another vertex
*connected*: graph in which every vertex is reachable for every other
*component of a graph*: maximally connected subgraph and any other remaining vertex would ruin property of connectivity

```{r}
#g is connected

#is.connected (g) Deprecated error
is_connected(g)

#and therefore only consists of a single component

#clusters (g) Deprecated error
components (g)
$membership

$csize

$no
```

*Weakly connected* graph's underlying graph (result of stripping away the tails and head labels) is connected. *Strongly connected* graphs are defined so because every vertex is reachable from every other vertex (*u*) by a directed walk. Graph dg is weakly connected:

```{r}
is.connected (dg, mode = "weak")

is.connected (dg, mode = "strong")
```

Shortest *distance* between vertices is defined as the shortest path between vertices (aka: *geodesic*). Longest distance in a graph called *diameter*.

```{r}
diameter (g, weights = NA)
```

Different types of graphs illustrated:

```{r}
g.full <- make_full_graph(7)
g.ring <- make_ring(7)
g.tree <- make_tree(7, children=2, mode="undirected")
g.star <- make_star(7, mode="undirected")
par(mfrow=c(2, 2), mai = c(0.2, 0.2, 0.2, 0.2))
plot(g.full)
plot(g.ring)
plot(g.tree)
plot(g.star)
```

A *complete* graph's every vertex is joined to every other vertex by an edge. Concept of *completeness* useful in defining a *clique* which is a complete subgraph. All of the graphs created above are complete of the order N<sub>v<sub> = 7 because each vertex is connected to all of the other six vertices.

A graph in which every vertex has the same degree is a *regular* graph. A regular graph with a common degree (*d*) is a *d-regular* graph. For example, the ring graph plotted above is a 2-regular graph. An infinite standard lattice graph, like a checker board, is a 4-regular graph.

A connected graph with no cycles is a *tree*. The disjoint union of a tree graph is a *forest*. Trees are important in network analysis and serve as the key data structure in efficient designs of many computational algorithms. A diagraph with a tree as an underlying graph is called a *directed tree*. A *root* is a special vertex from which there is a directed path to every other vertex in the graph, which is called a *rooted tree*. A vertex preceding another root on a path from the root is an *ancestor*, and a vertex follow another is a *descendant*. Immediate ancestors are *parents* and immediate descendants, *children*. A vertex without children is a *leaf*. The distance from the root to farthest leaf is the *depth* of the tree. In the tree created above each vertex is the ancestor of 2 descendants (except for the leafs). The tree has a depth 2 with vertex 1 functioning as the root.

The *k-star* graph created is a special tree. It consists of 1 root and *k* leaves. It illustrates the vertex and its immediate neighbors without showing connectivity of neighbors to each other.

A *directed acyclic graph (DAG)* is an important generalization of a tree. It is directed, but with out directed cycles. Unlike a directed tree, its underlying graph doesn't have to be a tree, because in replacing arcs with undirected edges cycles may be created. Graph dg is direct but not a DAG because it contains a mutual edge (2-cycle):

```{r}
# is.dag (dg) Deprecated error
is_dag (dg)
```

This can be a useful computation algorithms to design on because it is efficient and takes advantage of the near-tree-like structure.

*Bipartite* graphs contain 2 sets of vertices which can be disjointed (V<sub>1<sub>, V<sub>2<sub>), but where edges have an endpoint in V<sub>1<sub> and an endpoint in V<sub>2<sub>.

The bipartite graph below shows relationship between actors and movies:

```{r}
g.bip <- graph_from_literal(actor1:actor2:actor3,
   movie1:movie2, actor1:actor2 - movie1,
   actor2:actor3 - movie2)
V(g.bip)$type <- grepl("^movie", V(g.bip)$name)
print_all(g.bip, v=T)
```

```{r}
proj <- bipartite_projection(g.bip)
print_all(proj[[1]])

print_all(proj[[2]])
```

Chapter 3 Visualizing Network Data

*Graph drawing* and *graph visualization* are fields concerned with the techniques of visualization combining mathematics, human aesthetics and algorithms. Drawing conventions, aesthetics and constrains form parameters for visualization and prevent totally randomized graphs which are often unreadable.

In igraph, plot calls a variety of algorithms which produce an assortment of visualizations.

3.3 Graph Layouts

Layout defined: placement of vertices and edges in space

Create 2 networks: first a lattice (5x5x5) and the other a network of blogs related to AIDS in a 3-day period in Aug 2005: 

```{r}
library(sand)
g.l <- make_lattice(c(5, 5, 5))
data(aidsblog)
summary(aidsblog)
#Returned message: 
#> summary(aidsblog)
#This graph was created by an old(er) igraph version.
#ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
#For now we convert it on the fly...
#IGRAPH 3e85e7e D--- 146 187 -- 
```

*Circular layout* is the simplest. Shown below on lattice and blog networks.

```{r}
igraph_options(vertex.size=3, vertex.label=NA,
   edge.arrow.size=0.5)
par(mfrow=c(1, 2))
plot(g.l, layout=layout_in_circle)
title("5x5x5 Lattice")
plot(aidsblog, layout=layout_in_circle)
title("Blog Network")
```

It is important to order the vertices otherwise the lattice would look like the blog network. 

The earliest proposal for structuring a graph with an analogy to physical forces is the *spring-embedder* method which associates vertices with balls and edges with springs and uses attractive and repulsive forces. The Fruchterman and Reingold method is a commonly used spring-embedder type:

```{r}
plot(g.l,layout=layout_with_fr)
title("5x5x5 Lattice")
plot(aidsblog,layout=layout_with_fr)
title("Blog Network")
```

A graph, also based on energy, but placing vertices at their most relax and therefore most visually pleasing state, is called an *energy-placement* method.

Social network literature has a long history of utilizing multidensional scaling (MDS) which is a type of the energy-placement method. The Kamada and Kawai variant is used below and the output is similar to the Fruchterman-Reingold. 

```{r}
plot(g.l, layout=layout_with_kk)
title("5x5x5 Lattice")
plot(aidsblog, layout=layout_with_kk)
title("Blog Network")
```

The apparent structure of a graph may or may not be apparent depending on the layout:

```{r}
g.tree <- graph_from_literal(1-+2,1-+3,1-+4,2-+5,2-+6,
                         2-+7,3-+8,3-+9,4-+10)
par(mfrow=c(1, 3))
igraph_options(vertex.size=30, edge.arrow.size=0.5,
   vertex.label=NULL)
plot(g.tree, layout=layout_in_circle)
plot(g.tree, layout=layout_as_tree(g.tree, circular=T))
plot(g.tree, layout=layout_as_tree)
```

In the circular layout (left) the tree is not apparent but when a radial (center) or layered (right) layout is utilized, the tree emerges.

Visualization of the actor and movie bipartite graph in Chapter 2 using edges that run across rows or columns (like railroad tracks):

```{r}
plot(g.bip, layout= -layout_as_bipartite(g.bip)[,2:1], 
   vertex.size=60, vertex.shape=ifelse(V(g.bip)$type, 
      "rectangle", "circle"),
   vertex.label.cex=1.75,
   vertex.color=ifelse(V(g.bip)$type, "red", "cyan"))
   ```

3.4 Decorating Graph Layouts

Incorporating relevant data into layouts by varying the characteristics of graph elements (ie: using color, shape, size  for vertices and edges). Example below shows decoration of the "Karate Club Network":

```{r}
library(igraphdata)
data(karate)
# Reproducible layout
set.seed(42)
l <- layout_with_kk(karate)
# Plot undecorated first.
igraph_options(vertex.size=10)
par(mfrow=c(1,1))
plot(karate, layout=l, vertex.label=V(karate), 
   vertex.color=NA)
# Now decorate, starting with labels.
V(karate)$label <- sub("Actor ", "", V(karate)$name)
# Two leaders get shapes different from club members.
V(karate)$shape <- "circle"
V(karate)[c("Mr Hi", "John A")]$shape <- "rectangle"
# Differentiate two factions by color.
V(karate)[Faction == 1]$color <- "red"
V(karate)[Faction == 2]$color <- "dodgerblue"
# Vertex area proportional to vertex strength
# (i.e., total weight of incident edges).
V(karate)$size <- 4*sqrt(strength(karate))
V(karate)$size2 <- V(karate)$size * .5
# Weight edges by number of common activities
E(karate)$width <- E(karate)$weight
# Color edges by within/between faction.
F1 <- V(karate)[Faction==1]
F2 <- V(karate)[Faction==2]
E(karate)[ F1 %--% F1 ]$color <- "pink"
E(karate)[ F2 %--% F2 ]$color <- "lightblue"
E(karate)[ F1 %--% F2 ]$color <- "yellow"
# Offset vertex labels for smaller points (default=0).
V(karate)$label.dist <- 
   ifelse(V(karate)$size >= 9.0, 0, 1.0)
# Plot decorated graph, using same layout.
plot(karate, layout=l)
```

Graph is shown undecorated first, then 
   labeled, 
   members vertices made rectangles and leaders vertices made into circles, 
   faction 1 made red and faction 2 made blue, 
   vertex sized by weight of incident edges and weight defined as common activities, 
   edges colored based on their connection between and within factions, 
   and vertex labels offset for smaller points for readability.
A similar layout is shown in the Introduction on pg 4 of the Lazega's lawyer network:
```{r}
library(sand)
data(lazega)
# Office location indicated by color.
colbar <- c("red", "dodgerblue", "goldenrod")
v.colors <- colbar[V(lazega)$Office]
# Type of practice indicated by vertex shape.
v.shapes <- c("circle", "square")[V(lazega)$Practice]
# Vertex size proportional to years with firm.
v.size <- 3.5*sqrt(V(lazega)$Years)
# Label vertices according to seniority.
v.label <- V(lazega)$Seniority
# Reproducible layout.
set.seed(42)
l <- layout_with_fr(lazega)
plot(lazega, layout=l, vertex.color=v.colors,
   vertex.shape=v.shapes, vertex.size=v.size,
   vertex.label=v.label)
```

3.5 Visualizaing Large Networks

Networks which contain around 100 vertices or more become cluttered and are unintelligible for more than 1000 vertices. Example of French political blogs:

```{r}
library(sand)
summary(fblog)

party.names <- sort(unique(V(fblog)$PolParty))
party.names

set.seed(42)
l = layout_with_kk(fblog)
party.nums.f <- as.factor(V(fblog)$PolParty)
party.nums <- as.numeric(party.nums.f)
# igraph color palette has 8 colors
# 9 colors needed (for 9 political parties)
library(RColorBrewer)
colrs <- brewer.pal(9,"Set1")
V(fblog)$color <- colrs[party.nums]
plot(fblog, layout=l, vertex.label=NA,
      vertex.size=3)
```

Using color to differentiate the 9 political parties does help, but the graph is still rather busy using the Kamada-Kawai method.

However, there are layout algorithms designed specifically for large networks. VxOrd is such a package and is an enhanced version of the spring-embedder method.

Another large visualization method is the DrL which is available in igraph. It produces the following graph with the French political blog network:

```{r}
set.seed(42)
l <- layout_with_drl(fblog)
plot(fblog, layout=l, vertex.size=5, vertex.label=NA)
```

This produces a visualization which clusters the blogs according to political affiliation, even though that information was not included in the data. Because this clustering could already be inferred, it is sometimes helpful to replace the groups with single meta-vertices, called coarsening the graph. 

```{r}
fblog.c <- contract(fblog, party.nums)
E(fblog.c)$weight <- 1
fblog.c <- simplify(fblog.c)

party.size <- as.vector(table(V(fblog)$PolParty))
plot(fblog.c, vertex.size=5*sqrt(party.size),
vertex.label=party.names, vertex.color=colrs,
edge.width=sqrt(E(fblog.c)$weight),
vertex.label.dist=3.5, edge.arrow.size=0)
```

This graph uses the numbers of edges between political groups to adjust the size of the vertices and edge thickness.

If analysis suggests that only a relevant subgraph should be shown, the structure local to a given vertex can be highlighted creating an *egocentric* network which are common in social literature analysis. This is illustrated below with the karate club network:

```{r}
data(karate)
k.nbhds <- make_ego_graph(karate, order=1)

#shows that the networks of Mr Hi and John A are the largest
sapply(k.nbhds, vcount)

#Pull out Mr Hi and John's subnetworks and plot them
k.1 <- k.nbhds[[1]]
k.34 <- k.nbhds[[34]]
par(mfrow=c(1,2))
plot(k.1, vertex.label=NA,
   vertex.color=c("red", rep("lightblue", 16)))
plot(k.34, vertex.label=NA,
   vertex.color=c(rep("lightblue", 17), "red"))
```

3.6 Using Visualization Tools Outside of **R**

Graphviz: write an igraph graph into a 'dot' file available in igraph's write.graph function

Pajek: Microsoft Windows environment

Cytoscape: Java; specializes in biological networks

Gephi: use rgexf to convert to gexf from igraph


